
prueba2.elf:     file format elf32-littlenios2
prueba2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000006c0 memsz 0x000006c0 flags r-x
    LOAD off    0x000016e0 vaddr 0x000016e0 paddr 0x000016e8 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000016f0 vaddr 0x000016f0 paddr 0x000016f0 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000560  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000016e0  000016f0  000016e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000008  000016e0  000016e8  000016e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  000016f0  000016f0  000016f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000185c  0000185c  000016e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000218  00000000  00000000  00001710  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000165d  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b55  00000000  00000000  00002f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000098e  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002b8  00000000  00000000  00004468  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ba9  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004e0  00000000  00000000  000052c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000057ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  000057c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006ad6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00006ad9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006ae5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006ae6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00006ae7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00006af2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00006afd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  00006b0c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b29  00000000  00000000  00006b3c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0008426e  00000000  00000000  0000b665  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
000016e0 l    d  .rodata	00000000 .rodata
000016e0 l    d  .rwdata	00000000 .rwdata
000016f0 l    d  .bss	00000000 .bss
0000185c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prueba2_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0000126c l     F .text	00000128 timer_isr
000016f8 l     O .bss	00000004 seconds.2645
000016f4 l     O .bss	00000004 minutes.2646
000016f0 l     O .bss	00000004 hours.2647
00001734 l     O .bss	00000028 nm.2648
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001730 g     O .bss	00000004 alt_instruction_exception_handler
0000171c g     O .bss	00000001 config_mode
0000160c g     F .text	0000002c alt_main
0000175c g     O .bss	00000100 alt_irq
000016e8 g       *ABS*	00000000 __flash_rwdata_start
0000170c g     O .bss	00000004 change_hours
000016d8 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000013a8 g     F .text	00000014 set_button_minutes
00001728 g     O .bss	00000004 alt_argv
000096e0 g       *ABS*	00000000 _gp
000016fc g     O .bss	00000004 alarm_m
000013bc g     F .text	00000020 set_switch_clock
00001664 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001708 g     O .bss	00000004 current_h
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000011f8 g     F .text	00000050 initializeMapping
0000185c g       *ABS*	00000000 __bss_end
000014c4 g     F .text	00000068 alt_iic_isr_register
000014ac g     F .text	00000018 alt_ic_irq_enabled
00001719 g     O .bss	00000001 alarm
00001720 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
0000165c g     F .text	00000004 alt_dcache_flush_all
000016e8 g       *ABS*	00000000 __ram_rwdata_end
000016e0 g       *ABS*	00000000 __ram_rodata_end
000016e4 g     O .rwdata	00000004 jtag_uart_0
0000185c g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
000011bc g     F .text	0000003c init_timer_interrupt
00001180 g     F .text	0000003c _start
00001700 g     O .bss	00000004 alarm_h
00001658 g     F .text	00000004 alt_sys_init
000016e0 g       *ABS*	00000000 __ram_rwdata_start
000016e0 g       *ABS*	00000000 __ram_rodata_start
0000185c g       *ABS*	00000000 __alt_stack_base
000016f0 g       *ABS*	00000000 __bss_start
0000141c g     F .text	0000001c main
00001724 g     O .bss	00000004 alt_envp
0000171a g     O .bss	00000001 set_h
000016e0 g       *ABS*	00000000 __flash_rodata_start
000013fc g     F .text	00000020 off_alarm
00001638 g     F .text	00000020 alt_irq_init
00001714 g     O .bss	00000004 alarm_dect
00001704 g     O .bss	00000004 current_m
0000172c g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
000013dc g     F .text	00000020 set_switch_alarm
0000171b g     O .bss	00000001 set_min
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001710 g     O .bss	00000004 change_min
00001438 g     F .text	00000004 alt_ic_isr_register
000016e8 g       *ABS*	00000000 _edata
00001718 g     O .bss	00000001 off
0000185c g       *ABS*	00000000 _end
00001394 g     F .text	00000014 set_button_hours
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001248 g     F .text	00000024 displayMapping
00001474 g     F .text	00000038 alt_ic_irq_disable
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
0000100c g       .entry	00000000 _exit
00001660 g     F .text	00000004 alt_icache_flush_all
000016e0 g     O .rwdata	00000004 alt_priority_mask
0000143c g     F .text	00000038 alt_ic_irq_enable
0000152c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	8405d704 	addi	r16,r16,5980

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7a34>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7a3c>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a01417 	ldw	r2,-32688(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a5b814 	ori	gp,gp,38624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	1085bc14 	ori	r2,r2,5872

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c61714 	ori	r3,r3,6236

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff7ac4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	000152c0 	call	152c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	000160c0 	call	160c <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7ad8>

000011bc <init_timer_interrupt>:
	  set_button_minutes();
  }
  return 0;
}

void init_timer_interrupt( void){
    11bc:	defffe04 	addi	sp,sp,-8
	//Register the ISR with HAL
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)timer_isr, NULL, 0x0);
    11c0:	01800034 	movhi	r6,0
    11c4:	d8000015 	stw	zero,0(sp)
    11c8:	000f883a 	mov	r7,zero
    11cc:	31849b04 	addi	r6,r6,4716
    11d0:	014000c4 	movi	r5,3
    11d4:	0009883a 	mov	r4,zero
	  set_button_minutes();
  }
  return 0;
}

void init_timer_interrupt( void){
    11d8:	dfc00115 	stw	ra,4(sp)
	//Register the ISR with HAL
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)timer_isr, NULL, 0x0);
    11dc:	00014380 	call	1438 <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
    11e0:	008c0904 	movi	r2,12324
    11e4:	00c001c4 	movi	r3,7
    11e8:	10c00035 	stwio	r3,0(r2)
			| ALTERA_AVALON_TIMER_CONTROL_START_MSK
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
    11ec:	dfc00117 	ldw	ra,4(sp)
    11f0:	dec00204 	addi	sp,sp,8
    11f4:	f800283a 	ret

000011f8 <initializeMapping>:
    int mapping[10];
} NumberMapping;

void initializeMapping(NumberMapping *nm) {
    // Inicializa el mapeo de n meros
	nm->mapping[0] = 64;
    11f8:	00801004 	movi	r2,64
    11fc:	20800015 	stw	r2,0(r4)
    nm->mapping[1] = 79;
    1200:	008013c4 	movi	r2,79
    1204:	20800115 	stw	r2,4(r4)
    nm->mapping[2] = 36;
    1208:	00800904 	movi	r2,36
    120c:	20800215 	stw	r2,8(r4)
    nm->mapping[3] = 48;
    1210:	00800c04 	movi	r2,48
    1214:	20800315 	stw	r2,12(r4)
    nm->mapping[4] = 25;
    1218:	00800644 	movi	r2,25
    121c:	20800415 	stw	r2,16(r4)
    nm->mapping[5] = 18;
    1220:	00800484 	movi	r2,18
    1224:	20800515 	stw	r2,20(r4)
    nm->mapping[6] = 2;
    1228:	00800084 	movi	r2,2
    122c:	20800615 	stw	r2,24(r4)
    nm->mapping[7] = 120;
    1230:	00801e04 	movi	r2,120
    1234:	20800715 	stw	r2,28(r4)
    nm->mapping[8] = 0;
    nm->mapping[9] = 16;
    1238:	00800404 	movi	r2,16
    nm->mapping[3] = 48;
    nm->mapping[4] = 25;
    nm->mapping[5] = 18;
    nm->mapping[6] = 2;
    nm->mapping[7] = 120;
    nm->mapping[8] = 0;
    123c:	20000815 	stw	zero,32(r4)
    nm->mapping[9] = 16;
    1240:	20800915 	stw	r2,36(r4)
    1244:	f800283a 	ret

00001248 <displayMapping>:
    volatile unsigned long *led1 = (volatile unsigned long *) 0x31b0; // Display de horas (decena)
    volatile unsigned long *buzz = (volatile unsigned long *) 0x3160;

    static NumberMapping nm;

    *seg1 = nm.mapping[minutes % 10];    // Unidad de minutos
    1248:	008c6404 	movi	r2,12688
    124c:	10000015 	stw	zero,0(r2)
    *seg2 = nm.mapping[minutes / 10];    // Decena de minutos
    1250:	008c6004 	movi	r2,12672
    1254:	10000015 	stw	zero,0(r2)
    *seg3 = nm.mapping[hours % 10];      // Unidad de horas
    1258:	008c5c04 	movi	r2,12656
    125c:	10000015 	stw	zero,0(r2)
    *seg4 = nm.mapping[hours / 10];
    1260:	008c6804 	movi	r2,12704
    1264:	10000015 	stw	zero,0(r2)
    1268:	f800283a 	ret

0000126c <timer_isr>:
	        static int minutes = 0;
	        static int hours = 0;
	        static NumberMapping nm;

	        // Inicializa el mapeo si es la primera llamada a la ISR
	        if (seconds == 0 && minutes == 0 && hours == 0) {
    126c:	d0a00617 	ldw	r2,-32744(gp)
int current_h=0;
int current_m=0;
int alarm_h = 0;
int alarm_m = 0;

static void timer_isr(void * context, alt_u32 id){
    1270:	deffff04 	addi	sp,sp,-4
    1274:	dfc00015 	stw	ra,0(sp)
	        static int minutes = 0;
	        static int hours = 0;
	        static NumberMapping nm;

	        // Inicializa el mapeo si es la primera llamada a la ISR
	        if (seconds == 0 && minutes == 0 && hours == 0) {
    1278:	10000a1e 	bne	r2,zero,12a4 <timer_isr+0x38>
    127c:	d0a00517 	ldw	r2,-32748(gp)
    1280:	1000081e 	bne	r2,zero,12a4 <timer_isr+0x38>
    1284:	d0a00417 	ldw	r2,-32752(gp)
    1288:	1000061e 	bne	r2,zero,12a4 <timer_isr+0x38>
	            initializeMapping(&nm);
    128c:	01000034 	movhi	r4,0
    1290:	2105cd04 	addi	r4,r4,5940
    1294:	00011f80 	call	11f8 <initializeMapping>
	            displayMapping(minutes, hours);
    1298:	000b883a 	mov	r5,zero
    129c:	0009883a 	mov	r4,zero
    12a0:	00012480 	call	1248 <displayMapping>
	        }

	        // Limpia la interrupci n del temporizador
	        IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    12a4:	008c0804 	movi	r2,12320
    12a8:	10000035 	stwio	zero,0(r2)

	        // Verifica si el reloj est  en modo de configuraci n
	        if (config_mode == 1) {
    12ac:	d1600f03 	ldbu	r5,-32708(gp)
    12b0:	01000044 	movi	r4,1
    12b4:	d0e00517 	ldw	r3,-32748(gp)
    12b8:	d0a00417 	ldw	r2,-32752(gp)
    12bc:	2900171e 	bne	r5,r4,131c <timer_isr+0xb0>

	            if (set_h == 0) {
    12c0:	d1200e83 	ldbu	r4,-32710(gp)
    12c4:	2000061e 	bne	r4,zero,12e0 <timer_isr+0x74>

	            	if(hours < 23){
    12c8:	01000584 	movi	r4,22
    12cc:	20800316 	blt	r4,r2,12dc <timer_isr+0x70>
	            		hours++;
    12d0:	10800044 	addi	r2,r2,1
    12d4:	d0a00415 	stw	r2,-32752(gp)
    12d8:	00000106 	br	12e0 <timer_isr+0x74>
	            	}else{
	            		hours = 0;
    12dc:	d0200415 	stw	zero,-32752(gp)
	            	}
	            }
	            if (set_min == 0) {
    12e0:	d0a00ec3 	ldbu	r2,-32709(gp)
    12e4:	1000061e 	bne	r2,zero,1300 <timer_isr+0x94>
	            	if(minutes < 59){
    12e8:	00800e84 	movi	r2,58
    12ec:	10c00316 	blt	r2,r3,12fc <timer_isr+0x90>
	            	minutes++;
    12f0:	18c00044 	addi	r3,r3,1
    12f4:	d0e00515 	stw	r3,-32748(gp)
    12f8:	00000106 	br	1300 <timer_isr+0x94>
	            	}else{
	            		minutes = 0;
    12fc:	d0200515 	stw	zero,-32748(gp)
	            	}
	            }
	            current_h = hours;
    1300:	d1600417 	ldw	r5,-32752(gp)
				current_m= minutes;
    1304:	d1200517 	ldw	r4,-32748(gp)
	            	minutes++;
	            	}else{
	            		minutes = 0;
	            	}
	            }
	            current_h = hours;
    1308:	d1600a15 	stw	r5,-32728(gp)
				current_m= minutes;
    130c:	d1200915 	stw	r4,-32732(gp)
	            // Lee el switch para entrar en modo de configuraci n
	            if (config_mode == 1) {
	                config_mode = 1; // Entrar en modo de configuraci n
	            }
	        }
	    }
    1310:	dfc00017 	ldw	ra,0(sp)
    1314:	dec00104 	addi	sp,sp,4
	            		minutes = 0;
	            	}
	            }
	            current_h = hours;
				current_m= minutes;
				displayMapping(minutes, hours);
    1318:	00012481 	jmpi	1248 <displayMapping>
	        		if (off == 0){
	        			*buzz = 1;
	        		}
	        	}
	        	*/
	            seconds++;
    131c:	d1200617 	ldw	r4,-32744(gp)
	            if (seconds > 60) {
    1320:	01400f04 	movi	r5,60
	        		if (off == 0){
	        			*buzz = 1;
	        		}
	        	}
	        	*/
	            seconds++;
    1324:	21000044 	addi	r4,r4,1
	            if (seconds > 60) {
    1328:	29000216 	blt	r5,r4,1334 <timer_isr+0xc8>
	        		if (off == 0){
	        			*buzz = 1;
	        		}
	        	}
	        	*/
	            seconds++;
    132c:	d1200615 	stw	r4,-32744(gp)
    1330:	00000c06 	br	1364 <timer_isr+0xf8>
	            if (seconds > 60) {
	                seconds = 0;
    1334:	d0200615 	stw	zero,-32744(gp)
	                minutes++;
    1338:	18c00044 	addi	r3,r3,1
	                if (minutes > 60) {
    133c:	28c00216 	blt	r5,r3,1348 <timer_isr+0xdc>
	        	}
	        	*/
	            seconds++;
	            if (seconds > 60) {
	                seconds = 0;
	                minutes++;
    1340:	d0e00515 	stw	r3,-32748(gp)
    1344:	00000706 	br	1364 <timer_isr+0xf8>
	                if (minutes > 60) {
	                    minutes = 0;
    1348:	d0200515 	stw	zero,-32748(gp)
	                    hours++;
    134c:	10800044 	addi	r2,r2,1
	                    if (hours > 24) {
    1350:	00c00604 	movi	r3,24
    1354:	18800216 	blt	r3,r2,1360 <timer_isr+0xf4>
	            if (seconds > 60) {
	                seconds = 0;
	                minutes++;
	                if (minutes > 60) {
	                    minutes = 0;
	                    hours++;
    1358:	d0a00415 	stw	r2,-32752(gp)
    135c:	00000106 	br	1364 <timer_isr+0xf8>
	                    if (hours > 24) {
	                        hours = 0; // Reinicia las horas si llega a 24
    1360:	d0200415 	stw	zero,-32752(gp)
	                    }
	                }
	            }
	            current_h = hours;
    1364:	d1600417 	ldw	r5,-32752(gp)
	            current_m= minutes;
    1368:	d1200517 	ldw	r4,-32748(gp)
	                    if (hours > 24) {
	                        hours = 0; // Reinicia las horas si llega a 24
	                    }
	                }
	            }
	            current_h = hours;
    136c:	d1600a15 	stw	r5,-32728(gp)
	            current_m= minutes;
    1370:	d1200915 	stw	r4,-32732(gp)
	            displayMapping(minutes, hours);
    1374:	00012480 	call	1248 <displayMapping>

	            // Lee el switch para entrar en modo de configuraci n
	            if (config_mode == 1) {
    1378:	d0a00f03 	ldbu	r2,-32708(gp)
    137c:	00c00044 	movi	r3,1
    1380:	10c0011e 	bne	r2,r3,1388 <timer_isr+0x11c>
	                config_mode = 1; // Entrar en modo de configuraci n
    1384:	d0a00f05 	stb	r2,-32708(gp)
	            }
	        }
	    }
    1388:	dfc00017 	ldw	ra,0(sp)
    138c:	dec00104 	addi	sp,sp,4
    1390:	f800283a 	ret

00001394 <set_button_hours>:
	}
}

void set_button_hours() {
    alt_u8 button_status = 0;
    button_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_BUTTON_HOURS_BASE) & 0x01;
    1394:	008c4404 	movi	r2,12560
    1398:	10800037 	ldwio	r2,0(r2)
    set_h=button_status;
    139c:	1080004c 	andi	r2,r2,1
    13a0:	d0a00e85 	stb	r2,-32710(gp)
    13a4:	f800283a 	ret

000013a8 <set_button_minutes>:
}

void set_button_minutes() {
    alt_u8 button_status = 0;
    button_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_BUTTON_MINUTES_BASE) & 0x01;
    13a8:	008c4004 	movi	r2,12544
    13ac:	10800037 	ldwio	r2,0(r2)
    set_min=button_status;
    13b0:	1080004c 	andi	r2,r2,1
    13b4:	d0a00ec5 	stb	r2,-32709(gp)
    13b8:	f800283a 	ret

000013bc <set_switch_clock>:
}

void set_switch_clock(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_CLOCK_BASE) & 0x01;
    13bc:	008c4c04 	movi	r2,12592
    13c0:	10800037 	ldwio	r2,0(r2)
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    13c4:	00cc6c04 	movi	r3,12720
    set_min=button_status;
}

void set_switch_clock(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_CLOCK_BASE) & 0x01;
    13c8:	1080004c 	andi	r2,r2,1
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    13cc:	0088303a 	nor	r4,zero,r2
    13d0:	19000035 	stwio	r4,0(r3)
 	config_mode = switch_status;
    13d4:	d0a00f05 	stb	r2,-32708(gp)
    13d8:	f800283a 	ret

000013dc <set_switch_alarm>:
}

void set_switch_alarm(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SET_ALARM_BASE) & 0x01;
    13dc:	008c5004 	movi	r2,12608
    13e0:	10800037 	ldwio	r2,0(r2)
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    13e4:	00cc6c04 	movi	r3,12720
 	config_mode = switch_status;
}

void set_switch_alarm(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SET_ALARM_BASE) & 0x01;
    13e8:	1080004c 	andi	r2,r2,1
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    13ec:	0088303a 	nor	r4,zero,r2
    13f0:	19000035 	stwio	r4,0(r3)
 	alarm = switch_status;
    13f4:	d0a00e45 	stb	r2,-32711(gp)
    13f8:	f800283a 	ret

000013fc <off_alarm>:
}

void off_alarm(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_OFF_BASE) & 0x01;
    13fc:	008c5404 	movi	r2,12624
    1400:	10800037 	ldwio	r2,0(r2)
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    1404:	00cc6c04 	movi	r3,12720
 	alarm = switch_status;
}

void off_alarm(){
	alt_u8 switch_status = 0;
 	switch_status = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_OFF_BASE) & 0x01;
    1408:	1080004c 	andi	r2,r2,1
 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, ~switch_status);
    140c:	0088303a 	nor	r4,zero,r2
    1410:	19000035 	stwio	r4,0(r3)
 	off = switch_status;
    1414:	d0a00e05 	stb	r2,-32712(gp)
    1418:	f800283a 	ret

0000141c <main>:

void init_timer_interrupt ( void );
static void timer_isr(void * context, alt_u32 id);

int main()
{ 
    141c:	deffff04 	addi	sp,sp,-4
    1420:	dfc00015 	stw	ra,0(sp)
  init_timer_interrupt();
    1424:	00011bc0 	call	11bc <init_timer_interrupt>

  /* Event loop never exits. */
  while (1){
	  set_switch_clock();
    1428:	00013bc0 	call	13bc <set_switch_clock>
	  set_button_hours();
    142c:	00013940 	call	1394 <set_button_hours>
	  set_button_minutes();
    1430:	00013a80 	call	13a8 <set_button_minutes>
    1434:	003ffc06 	br	1428 <_gp+0xffff7d48>

00001438 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1438:	00014c41 	jmpi	14c4 <alt_iic_isr_register>

0000143c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    143c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1440:	00bfff84 	movi	r2,-2
    1444:	2084703a 	and	r2,r4,r2
    1448:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    144c:	00c00044 	movi	r3,1
    1450:	d0a01017 	ldw	r2,-32704(gp)
    1454:	194a983a 	sll	r5,r3,r5
    1458:	288ab03a 	or	r5,r5,r2
    145c:	d1601015 	stw	r5,-32704(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1460:	d0a01017 	ldw	r2,-32704(gp)
    1464:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1468:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    146c:	0005883a 	mov	r2,zero
    1470:	f800283a 	ret

00001474 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1474:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1478:	00bfff84 	movi	r2,-2
    147c:	2084703a 	and	r2,r4,r2
    1480:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1484:	00ffff84 	movi	r3,-2
    1488:	d0a01017 	ldw	r2,-32704(gp)
    148c:	194a183a 	rol	r5,r3,r5
    1490:	288a703a 	and	r5,r5,r2
    1494:	d1601015 	stw	r5,-32704(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1498:	d0a01017 	ldw	r2,-32704(gp)
    149c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14a0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    14a4:	0005883a 	mov	r2,zero
    14a8:	f800283a 	ret

000014ac <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    14ac:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    14b0:	00800044 	movi	r2,1
    14b4:	1144983a 	sll	r2,r2,r5
    14b8:	10c4703a 	and	r2,r2,r3
}
    14bc:	1004c03a 	cmpne	r2,r2,zero
    14c0:	f800283a 	ret

000014c4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    14c4:	00c007c4 	movi	r3,31
    14c8:	19401616 	blt	r3,r5,1524 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    14cc:	defffe04 	addi	sp,sp,-8
    14d0:	dfc00115 	stw	ra,4(sp)
    14d4:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14d8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14dc:	00ffff84 	movi	r3,-2
    14e0:	80c6703a 	and	r3,r16,r3
    14e4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    14e8:	280490fa 	slli	r2,r5,3
    14ec:	00c00034 	movhi	r3,0
    14f0:	18c5d704 	addi	r3,r3,5980
    14f4:	1885883a 	add	r2,r3,r2
    14f8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    14fc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1500:	30000226 	beq	r6,zero,150c <alt_iic_isr_register+0x48>
    1504:	000143c0 	call	143c <alt_ic_irq_enable>
    1508:	00000106 	br	1510 <alt_iic_isr_register+0x4c>
    150c:	00014740 	call	1474 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1510:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    1514:	dfc00117 	ldw	ra,4(sp)
    1518:	dc000017 	ldw	r16,0(sp)
    151c:	dec00204 	addi	sp,sp,8
    1520:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    1524:	00bffa84 	movi	r2,-22
    1528:	f800283a 	ret

0000152c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    152c:	deffff04 	addi	sp,sp,-4
    1530:	01000034 	movhi	r4,0
    1534:	01400034 	movhi	r5,0
    1538:	dfc00015 	stw	ra,0(sp)
    153c:	2105b804 	addi	r4,r4,5856
    1540:	2945ba04 	addi	r5,r5,5864

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1544:	2140061e 	bne	r4,r5,1560 <alt_load+0x34>
    1548:	01000034 	movhi	r4,0
    154c:	01400034 	movhi	r5,0
    1550:	21040804 	addi	r4,r4,4128
    1554:	29440804 	addi	r5,r5,4128
    1558:	2140121e 	bne	r4,r5,15a4 <alt_load+0x78>
    155c:	00000b06 	br	158c <alt_load+0x60>
    1560:	00c00034 	movhi	r3,0
    1564:	18c5ba04 	addi	r3,r3,5864
    1568:	1907c83a 	sub	r3,r3,r4
    156c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1570:	10fff526 	beq	r2,r3,1548 <_gp+0xffff7e68>
    {
      *to++ = *from++;
    1574:	114f883a 	add	r7,r2,r5
    1578:	39c00017 	ldw	r7,0(r7)
    157c:	110d883a 	add	r6,r2,r4
    1580:	10800104 	addi	r2,r2,4
    1584:	31c00015 	stw	r7,0(r6)
    1588:	003ff906 	br	1570 <_gp+0xffff7e90>
    158c:	01000034 	movhi	r4,0
    1590:	01400034 	movhi	r5,0
    1594:	2105b804 	addi	r4,r4,5856
    1598:	2945b804 	addi	r5,r5,5856

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    159c:	2140101e 	bne	r4,r5,15e0 <alt_load+0xb4>
    15a0:	00000b06 	br	15d0 <alt_load+0xa4>
    15a4:	00c00034 	movhi	r3,0
    15a8:	18c46004 	addi	r3,r3,4480
    15ac:	1907c83a 	sub	r3,r3,r4
    15b0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    15b4:	10fff526 	beq	r2,r3,158c <_gp+0xffff7eac>
    {
      *to++ = *from++;
    15b8:	114f883a 	add	r7,r2,r5
    15bc:	39c00017 	ldw	r7,0(r7)
    15c0:	110d883a 	add	r6,r2,r4
    15c4:	10800104 	addi	r2,r2,4
    15c8:	31c00015 	stw	r7,0(r6)
    15cc:	003ff906 	br	15b4 <_gp+0xffff7ed4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    15d0:	000165c0 	call	165c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    15d4:	dfc00017 	ldw	ra,0(sp)
    15d8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    15dc:	00016601 	jmpi	1660 <alt_icache_flush_all>
    15e0:	00c00034 	movhi	r3,0
    15e4:	18c5b804 	addi	r3,r3,5856
    15e8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    15ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
    15f0:	18bff726 	beq	r3,r2,15d0 <_gp+0xffff7ef0>
    {
      *to++ = *from++;
    15f4:	114f883a 	add	r7,r2,r5
    15f8:	39c00017 	ldw	r7,0(r7)
    15fc:	110d883a 	add	r6,r2,r4
    1600:	10800104 	addi	r2,r2,4
    1604:	31c00015 	stw	r7,0(r6)
    1608:	003ff906 	br	15f0 <_gp+0xffff7f10>

0000160c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    160c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1610:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1614:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1618:	00016380 	call	1638 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    161c:	00016580 	call	1658 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1620:	d1a01117 	ldw	r6,-32700(gp)
    1624:	d1601217 	ldw	r5,-32696(gp)
    1628:	d1201317 	ldw	r4,-32692(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    162c:	dfc00017 	ldw	ra,0(sp)
    1630:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1634:	000141c1 	jmpi	141c <main>

00001638 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1638:	deffff04 	addi	sp,sp,-4
    163c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1640:	00016d80 	call	16d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1644:	00800044 	movi	r2,1
    1648:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    164c:	dfc00017 	ldw	ra,0(sp)
    1650:	dec00104 	addi	sp,sp,4
    1654:	f800283a 	ret

00001658 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1658:	f800283a 	ret

0000165c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    165c:	f800283a 	ret

00001660 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1660:	f800283a 	ret

00001664 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1664:	213ffe84 	addi	r4,r4,-6
    1668:	008003c4 	movi	r2,15
    166c:	11001636 	bltu	r2,r4,16c8 <alt_exception_cause_generated_bad_addr+0x64>
    1670:	200890ba 	slli	r4,r4,2
    1674:	00800034 	movhi	r2,0
    1678:	1085a204 	addi	r2,r2,5768
    167c:	2089883a 	add	r4,r4,r2
    1680:	20800017 	ldw	r2,0(r4)
    1684:	1000683a 	jmp	r2
    1688:	000016d0 	cmplti	zero,zero,91
    168c:	000016d0 	cmplti	zero,zero,91
    1690:	000016c8 	cmpgei	zero,zero,91
    1694:	000016c8 	cmpgei	zero,zero,91
    1698:	000016c8 	cmpgei	zero,zero,91
    169c:	000016d0 	cmplti	zero,zero,91
    16a0:	000016c8 	cmpgei	zero,zero,91
    16a4:	000016c8 	cmpgei	zero,zero,91
    16a8:	000016d0 	cmplti	zero,zero,91
    16ac:	000016d0 	cmplti	zero,zero,91
    16b0:	000016c8 	cmpgei	zero,zero,91
    16b4:	000016d0 	cmplti	zero,zero,91
    16b8:	000016c8 	cmpgei	zero,zero,91
    16bc:	000016c8 	cmpgei	zero,zero,91
    16c0:	000016c8 	cmpgei	zero,zero,91
    16c4:	000016d0 	cmplti	zero,zero,91
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    16c8:	0005883a 	mov	r2,zero
    16cc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    16d0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    16d4:	f800283a 	ret

000016d8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    16d8:	000170fa 	wrctl	ienable,zero
    16dc:	f800283a 	ret
