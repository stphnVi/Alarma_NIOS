
test_led.elf:     file format elf32-littlenios2
test_led.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000004dc memsz 0x000004dc flags r-x
    LOAD off    0x000014fc vaddr 0x000014fc paddr 0x00001500 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001504 vaddr 0x00001504 paddr 0x00001504 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001500  2**0
                  CONTENTS
  2 .text         000004c4  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000014e4  000014e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000014fc  00001500  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001504  00001504  00001504  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001510  00001510  00001500  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001528  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000010bd  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000092e  00000000  00000000  000027cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a40  00000000  00000000  000030fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000254  00000000  00000000  00003b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007f5  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000070b  00000000  00000000  00004585  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005c5a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00005c5d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005c69  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005c6a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00005c6b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005c76  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005c81  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY
 26 .jdi          00004244  00000000  00000000  00005cbd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000338eb  00000000  00000000  00009f01  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000014e4 l    d  .rodata	00000000 .rodata
000014fc l    d  .rwdata	00000000 .rwdata
00001504 l    d  .bss	00000000 .bss
00001510 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_led_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00001194 g     F .text	0000002c alt_main
00001500 g       *ABS*	00000000 __flash_rwdata_start
000011c0 g     F .text	00000038 alt_putstr
000012e4 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001508 g     O .bss	00000004 alt_argv
000094fc g       *ABS*	00000000 _gp
000011f8 g     F .text	00000004 usleep
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001400 g     F .text	00000064 .hidden __udivsi3
00001510 g       *ABS*	00000000 __bss_end
000012dc g     F .text	00000004 alt_dcache_flush_all
00001500 g       *ABS*	00000000 __ram_rwdata_end
000014fc g       *ABS*	00000000 __ram_rodata_end
000014fc g     O .rwdata	00000004 jtag_uart_0
00001464 g     F .text	00000058 .hidden __umodsi3
00001510 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001220 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
0000121c g     F .text	00000004 alt_sys_init
000014bc g     F .text	00000028 .hidden __mulsi3
000014fc g       *ABS*	00000000 __ram_rwdata_start
000014e4 g       *ABS*	00000000 __ram_rodata_start
00001254 g     F .text	00000088 alt_busy_sleep
00001510 g       *ABS*	00000000 __alt_stack_base
00001504 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000058 main
00001504 g     O .bss	00000004 alt_envp
00001308 g     F .text	00000084 .hidden __divsi3
000014e4 g       *ABS*	00000000 __flash_rodata_start
000011fc g     F .text	00000020 alt_irq_init
0000150c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001500 g       *ABS*	00000000 _edata
00001510 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000138c g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000012ec g     F .text	0000001c strlen
000012e0 g     F .text	00000004 alt_icache_flush_all
000010b4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a53f14 	ori	gp,gp,38140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10854114 	ori	r2,r2,5380

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c54414 	ori	r3,r3,5392

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010b40 	call	10b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011940 	call	1194 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:

#include "sys/alt_stdio.h"
#include "time.h"

int main()
{ 
    105c:	defffc04 	addi	sp,sp,-16
    1060:	dc800215 	stw	r18,8(sp)
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
    106c:	dfc00315 	stw	ra,12(sp)
	short a = 0;
    1070:	0021883a 	mov	r16,zero
    1074:	044c0004 	movi	r17,12288
	  if (a%2==0){
		  *led1=1;

	  }
	  else{
		  *led1=2;
    1078:	04800084 	movi	r18,2
	short a = 0;
	volatile unsigned short * led1= (short *) 0x3000;

  /* Event loop never exits. */
  while (1){
	  if (a%2==0){
    107c:	8080004c 	andi	r2,r16,1
    1080:	1000031e 	bne	r2,zero,1090 <main+0x34>
		  *led1=1;
    1084:	00800044 	movi	r2,1
    1088:	8880000d 	sth	r2,0(r17)
    108c:	00000106 	br	1094 <main+0x38>

	  }
	  else{
		  *led1=2;
    1090:	8c80000d 	sth	r18,0(r17)
	  }
	  a++;
	  usleep(1000000);
    1094:	010003f4 	movhi	r4,15
    1098:	21109004 	addi	r4,r4,16960
    109c:	00011f80 	call	11f8 <usleep>
	  alt_putstr("Hello from Nios II!\n");
    10a0:	01000034 	movhi	r4,0
    10a4:	21053904 	addi	r4,r4,5348
    10a8:	84000044 	addi	r16,r16,1
    10ac:	00011c00 	call	11c0 <alt_putstr>
  }
    10b0:	003ff206 	br	107c <main+0x20>

000010b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10b4:	deffff04 	addi	sp,sp,-4
    10b8:	01000034 	movhi	r4,0
    10bc:	01400034 	movhi	r5,0
    10c0:	dfc00015 	stw	ra,0(sp)
    10c4:	21053f04 	addi	r4,r4,5372
    10c8:	29454004 	addi	r5,r5,5376

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10cc:	2140061e 	bne	r4,r5,10e8 <alt_load+0x34>
    10d0:	01000034 	movhi	r4,0
    10d4:	01400034 	movhi	r5,0
    10d8:	21040804 	addi	r4,r4,4128
    10dc:	29440804 	addi	r5,r5,4128
    10e0:	2140121e 	bne	r4,r5,112c <alt_load+0x78>
    10e4:	00000b06 	br	1114 <alt_load+0x60>
    10e8:	00c00034 	movhi	r3,0
    10ec:	18c54004 	addi	r3,r3,5376
    10f0:	1907c83a 	sub	r3,r3,r4
    10f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    10f8:	10fff526 	beq	r2,r3,10d0 <alt_load+0x1c>
    {
      *to++ = *from++;
    10fc:	114f883a 	add	r7,r2,r5
    1100:	39c00017 	ldw	r7,0(r7)
    1104:	110d883a 	add	r6,r2,r4
    1108:	10800104 	addi	r2,r2,4
    110c:	31c00015 	stw	r7,0(r6)
    1110:	003ff906 	br	10f8 <alt_load+0x44>
    1114:	01000034 	movhi	r4,0
    1118:	01400034 	movhi	r5,0
    111c:	21053904 	addi	r4,r4,5348
    1120:	29453904 	addi	r5,r5,5348

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1124:	2140101e 	bne	r4,r5,1168 <alt_load+0xb4>
    1128:	00000b06 	br	1158 <alt_load+0xa4>
    112c:	00c00034 	movhi	r3,0
    1130:	18c40804 	addi	r3,r3,4128
    1134:	1907c83a 	sub	r3,r3,r4
    1138:	0005883a 	mov	r2,zero
  {
    while( to != end )
    113c:	10fff526 	beq	r2,r3,1114 <alt_load+0x60>
    {
      *to++ = *from++;
    1140:	114f883a 	add	r7,r2,r5
    1144:	39c00017 	ldw	r7,0(r7)
    1148:	110d883a 	add	r6,r2,r4
    114c:	10800104 	addi	r2,r2,4
    1150:	31c00015 	stw	r7,0(r6)
    1154:	003ff906 	br	113c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1158:	00012dc0 	call	12dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    115c:	dfc00017 	ldw	ra,0(sp)
    1160:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1164:	00012e01 	jmpi	12e0 <alt_icache_flush_all>
    1168:	00c00034 	movhi	r3,0
    116c:	18c53f04 	addi	r3,r3,5372
    1170:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1174:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1178:	18bff726 	beq	r3,r2,1158 <alt_load+0xa4>
    {
      *to++ = *from++;
    117c:	114f883a 	add	r7,r2,r5
    1180:	39c00017 	ldw	r7,0(r7)
    1184:	110d883a 	add	r6,r2,r4
    1188:	10800104 	addi	r2,r2,4
    118c:	31c00015 	stw	r7,0(r6)
    1190:	003ff906 	br	1178 <alt_load+0xc4>

00001194 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1194:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1198:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    119c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    11a0:	00011fc0 	call	11fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    11a4:	000121c0 	call	121c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11a8:	d1a00217 	ldw	r6,-32760(gp)
    11ac:	d1600317 	ldw	r5,-32756(gp)
    11b0:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    11b4:	dfc00017 	ldw	ra,0(sp)
    11b8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11bc:	000105c1 	jmpi	105c <main>

000011c0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    11c0:	defffe04 	addi	sp,sp,-8
    11c4:	dc000015 	stw	r16,0(sp)
    11c8:	dfc00115 	stw	ra,4(sp)
    11cc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11d0:	00012ec0 	call	12ec <strlen>
    11d4:	01000034 	movhi	r4,0
    11d8:	000f883a 	mov	r7,zero
    11dc:	100d883a 	mov	r6,r2
    11e0:	800b883a 	mov	r5,r16
    11e4:	21053f04 	addi	r4,r4,5372
#else
    return fputs(str, stdout);
#endif
#endif
}
    11e8:	dfc00117 	ldw	ra,4(sp)
    11ec:	dc000017 	ldw	r16,0(sp)
    11f0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11f4:	00012201 	jmpi	1220 <altera_avalon_jtag_uart_write>

000011f8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    11f8:	00012541 	jmpi	1254 <alt_busy_sleep>

000011fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11fc:	deffff04 	addi	sp,sp,-4
    1200:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1204:	00012e40 	call	12e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1208:	00800044 	movi	r2,1
    120c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1210:	dfc00017 	ldw	ra,0(sp)
    1214:	dec00104 	addi	sp,sp,4
    1218:	f800283a 	ret

0000121c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    121c:	f800283a 	ret

00001220 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1220:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1224:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1228:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    122c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1230:	2980072e 	bgeu	r5,r6,1250 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1234:	38c00037 	ldwio	r3,0(r7)
    1238:	18ffffec 	andhi	r3,r3,65535
    123c:	183ffc26 	beq	r3,zero,1230 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1240:	28c00007 	ldb	r3,0(r5)
    1244:	20c00035 	stwio	r3,0(r4)
    1248:	29400044 	addi	r5,r5,1
    124c:	003ff806 	br	1230 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    1250:	f800283a 	ret

00001254 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1254:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1258:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    125c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1260:	dc000015 	stw	r16,0(sp)
    1264:	dfc00115 	stw	ra,4(sp)
    1268:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    126c:	00014000 	call	1400 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1270:	10001026 	beq	r2,zero,12b4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1274:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1278:	013999b4 	movhi	r4,58982
    127c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1280:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1284:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1288:	297fffc4 	addi	r5,r5,-1
    128c:	283ffe1e 	bne	r5,zero,1288 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1290:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1294:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1298:	18bffb16 	blt	r3,r2,1288 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    129c:	01400144 	movi	r5,5
    12a0:	8009883a 	mov	r4,r16
    12a4:	00014bc0 	call	14bc <__mulsi3>
    12a8:	10bfffc4 	addi	r2,r2,-1
    12ac:	103ffe1e 	bne	r2,zero,12a8 <alt_busy_sleep+0x54>
    12b0:	00000506 	br	12c8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    12b4:	01400144 	movi	r5,5
    12b8:	8009883a 	mov	r4,r16
    12bc:	00014bc0 	call	14bc <__mulsi3>
    12c0:	10bfffc4 	addi	r2,r2,-1
    12c4:	00bffe16 	blt	zero,r2,12c0 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    12c8:	0005883a 	mov	r2,zero
    12cc:	dfc00117 	ldw	ra,4(sp)
    12d0:	dc000017 	ldw	r16,0(sp)
    12d4:	dec00204 	addi	sp,sp,8
    12d8:	f800283a 	ret

000012dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    12dc:	f800283a 	ret

000012e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    12e0:	f800283a 	ret

000012e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    12e4:	000170fa 	wrctl	ienable,zero
    12e8:	f800283a 	ret

000012ec <strlen>:
    12ec:	2005883a 	mov	r2,r4
    12f0:	10c00007 	ldb	r3,0(r2)
    12f4:	18000226 	beq	r3,zero,1300 <strlen+0x14>
    12f8:	10800044 	addi	r2,r2,1
    12fc:	003ffc06 	br	12f0 <strlen+0x4>
    1300:	1105c83a 	sub	r2,r2,r4
    1304:	f800283a 	ret

00001308 <__divsi3>:
    1308:	20001b16 	blt	r4,zero,1378 <__divsi3+0x70>
    130c:	000f883a 	mov	r7,zero
    1310:	28001616 	blt	r5,zero,136c <__divsi3+0x64>
    1314:	200d883a 	mov	r6,r4
    1318:	29001a2e 	bgeu	r5,r4,1384 <__divsi3+0x7c>
    131c:	00800804 	movi	r2,32
    1320:	00c00044 	movi	r3,1
    1324:	00000106 	br	132c <__divsi3+0x24>
    1328:	10000d26 	beq	r2,zero,1360 <__divsi3+0x58>
    132c:	294b883a 	add	r5,r5,r5
    1330:	10bfffc4 	addi	r2,r2,-1
    1334:	18c7883a 	add	r3,r3,r3
    1338:	293ffb36 	bltu	r5,r4,1328 <__divsi3+0x20>
    133c:	0005883a 	mov	r2,zero
    1340:	18000726 	beq	r3,zero,1360 <__divsi3+0x58>
    1344:	0005883a 	mov	r2,zero
    1348:	31400236 	bltu	r6,r5,1354 <__divsi3+0x4c>
    134c:	314dc83a 	sub	r6,r6,r5
    1350:	10c4b03a 	or	r2,r2,r3
    1354:	1806d07a 	srli	r3,r3,1
    1358:	280ad07a 	srli	r5,r5,1
    135c:	183ffa1e 	bne	r3,zero,1348 <__divsi3+0x40>
    1360:	38000126 	beq	r7,zero,1368 <__divsi3+0x60>
    1364:	0085c83a 	sub	r2,zero,r2
    1368:	f800283a 	ret
    136c:	014bc83a 	sub	r5,zero,r5
    1370:	39c0005c 	xori	r7,r7,1
    1374:	003fe706 	br	1314 <__divsi3+0xc>
    1378:	0109c83a 	sub	r4,zero,r4
    137c:	01c00044 	movi	r7,1
    1380:	003fe306 	br	1310 <__divsi3+0x8>
    1384:	00c00044 	movi	r3,1
    1388:	003fee06 	br	1344 <__divsi3+0x3c>

0000138c <__modsi3>:
    138c:	20001716 	blt	r4,zero,13ec <__modsi3+0x60>
    1390:	000f883a 	mov	r7,zero
    1394:	2005883a 	mov	r2,r4
    1398:	28001216 	blt	r5,zero,13e4 <__modsi3+0x58>
    139c:	2900162e 	bgeu	r5,r4,13f8 <__modsi3+0x6c>
    13a0:	01800804 	movi	r6,32
    13a4:	00c00044 	movi	r3,1
    13a8:	00000106 	br	13b0 <__modsi3+0x24>
    13ac:	30000a26 	beq	r6,zero,13d8 <__modsi3+0x4c>
    13b0:	294b883a 	add	r5,r5,r5
    13b4:	31bfffc4 	addi	r6,r6,-1
    13b8:	18c7883a 	add	r3,r3,r3
    13bc:	293ffb36 	bltu	r5,r4,13ac <__modsi3+0x20>
    13c0:	18000526 	beq	r3,zero,13d8 <__modsi3+0x4c>
    13c4:	1806d07a 	srli	r3,r3,1
    13c8:	11400136 	bltu	r2,r5,13d0 <__modsi3+0x44>
    13cc:	1145c83a 	sub	r2,r2,r5
    13d0:	280ad07a 	srli	r5,r5,1
    13d4:	183ffb1e 	bne	r3,zero,13c4 <__modsi3+0x38>
    13d8:	38000126 	beq	r7,zero,13e0 <__modsi3+0x54>
    13dc:	0085c83a 	sub	r2,zero,r2
    13e0:	f800283a 	ret
    13e4:	014bc83a 	sub	r5,zero,r5
    13e8:	003fec06 	br	139c <__modsi3+0x10>
    13ec:	0109c83a 	sub	r4,zero,r4
    13f0:	01c00044 	movi	r7,1
    13f4:	003fe706 	br	1394 <__modsi3+0x8>
    13f8:	00c00044 	movi	r3,1
    13fc:	003ff106 	br	13c4 <__modsi3+0x38>

00001400 <__udivsi3>:
    1400:	200d883a 	mov	r6,r4
    1404:	2900152e 	bgeu	r5,r4,145c <__udivsi3+0x5c>
    1408:	28001416 	blt	r5,zero,145c <__udivsi3+0x5c>
    140c:	00800804 	movi	r2,32
    1410:	00c00044 	movi	r3,1
    1414:	00000206 	br	1420 <__udivsi3+0x20>
    1418:	10000e26 	beq	r2,zero,1454 <__udivsi3+0x54>
    141c:	28000516 	blt	r5,zero,1434 <__udivsi3+0x34>
    1420:	294b883a 	add	r5,r5,r5
    1424:	10bfffc4 	addi	r2,r2,-1
    1428:	18c7883a 	add	r3,r3,r3
    142c:	293ffa36 	bltu	r5,r4,1418 <__udivsi3+0x18>
    1430:	18000826 	beq	r3,zero,1454 <__udivsi3+0x54>
    1434:	0005883a 	mov	r2,zero
    1438:	31400236 	bltu	r6,r5,1444 <__udivsi3+0x44>
    143c:	314dc83a 	sub	r6,r6,r5
    1440:	10c4b03a 	or	r2,r2,r3
    1444:	1806d07a 	srli	r3,r3,1
    1448:	280ad07a 	srli	r5,r5,1
    144c:	183ffa1e 	bne	r3,zero,1438 <__udivsi3+0x38>
    1450:	f800283a 	ret
    1454:	0005883a 	mov	r2,zero
    1458:	f800283a 	ret
    145c:	00c00044 	movi	r3,1
    1460:	003ff406 	br	1434 <__udivsi3+0x34>

00001464 <__umodsi3>:
    1464:	2005883a 	mov	r2,r4
    1468:	2900122e 	bgeu	r5,r4,14b4 <__umodsi3+0x50>
    146c:	28001116 	blt	r5,zero,14b4 <__umodsi3+0x50>
    1470:	01800804 	movi	r6,32
    1474:	00c00044 	movi	r3,1
    1478:	00000206 	br	1484 <__umodsi3+0x20>
    147c:	30000c26 	beq	r6,zero,14b0 <__umodsi3+0x4c>
    1480:	28000516 	blt	r5,zero,1498 <__umodsi3+0x34>
    1484:	294b883a 	add	r5,r5,r5
    1488:	31bfffc4 	addi	r6,r6,-1
    148c:	18c7883a 	add	r3,r3,r3
    1490:	293ffa36 	bltu	r5,r4,147c <__umodsi3+0x18>
    1494:	18000626 	beq	r3,zero,14b0 <__umodsi3+0x4c>
    1498:	1806d07a 	srli	r3,r3,1
    149c:	11400136 	bltu	r2,r5,14a4 <__umodsi3+0x40>
    14a0:	1145c83a 	sub	r2,r2,r5
    14a4:	280ad07a 	srli	r5,r5,1
    14a8:	183ffb1e 	bne	r3,zero,1498 <__umodsi3+0x34>
    14ac:	f800283a 	ret
    14b0:	f800283a 	ret
    14b4:	00c00044 	movi	r3,1
    14b8:	003ff706 	br	1498 <__umodsi3+0x34>

000014bc <__mulsi3>:
    14bc:	0005883a 	mov	r2,zero
    14c0:	20000726 	beq	r4,zero,14e0 <__mulsi3+0x24>
    14c4:	20c0004c 	andi	r3,r4,1
    14c8:	2008d07a 	srli	r4,r4,1
    14cc:	18000126 	beq	r3,zero,14d4 <__mulsi3+0x18>
    14d0:	1145883a 	add	r2,r2,r5
    14d4:	294b883a 	add	r5,r5,r5
    14d8:	203ffa1e 	bne	r4,zero,14c4 <__mulsi3+0x8>
    14dc:	f800283a 	ret
    14e0:	f800283a 	ret
